#Creates a special matrix that can cache the inverse.
makeCacheMatrix <- function(x = matrix()) {
    i <- NULL 
    set <- function(y) {
        x <<- y
        i <<- NULL
    }
    get <- function() x
    setinverse <- function(inverse) i <<- inverse
    getinverse <- function() i
    list(set = set,
         get = get,
         setinverse = setinverse,
         getinverse = getinverse)
}

#This function is used to compute the inverse of the special matrix that was returned by the function above.
#If the inverse has already been calculated, then cacheSolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
    i <- x$getinverse()
    if (!is.null(i)) {
        message("getting cached data")
        return(i)
    }
    data <- x$get()
    i <- solve(data, ...)
    x$setinverse(i)
    i
}

#test
m<- matrix(c(1,0,1,2),2,2)
cm <- makeCacheMatrix(m)
cacheSolve(cm)


##Please pass me.
